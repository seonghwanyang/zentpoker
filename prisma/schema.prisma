// Prisma 스키마 파일
// 데이터베이스 테이블 구조와 관계를 정의합니다

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// 사용자 역할
enum Role {
  USER
  ADMIN
}

// 회원 등급
enum Tier {
  GUEST
  REGULAR
}

// 사용자 상태
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

// 거래 타입
enum TransactionType {
  CHARGE
  VOUCHER_PURCHASE
  ADMIN_ADJUSTMENT
  REFUND
}

// 거래 상태
enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
  FAILED
}

// 바인권 타입
enum VoucherType {
  BUYIN
  REBUY
}

// 바인권 상태
enum VoucherStatus {
  ACTIVE
  USED
  EXPIRED
}

// 사용자 모델
model User {
  id            String          @id @default(cuid())
  email         String?         @unique
  emailVerified DateTime?
  name          String?
  image         String?
  phone         String?
  role          Role            @default(USER)
  tier          Tier            @default(GUEST)
  status        UserStatus      @default(ACTIVE)
  points        Int             @default(0)
  lastLoginAt   DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
  vouchers      Voucher[]

  @@index([email])
  @@index([role])
  @@index([tier])
}

// NextAuth Account 모델
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// NextAuth Session 모델
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// NextAuth VerificationToken 모델
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 거래 내역
model Transaction {
  id          String            @id @default(cuid())
  userId      String
  type        TransactionType
  amount      Int
  status      TransactionStatus @default(PENDING)
  description String?
  metadata    Json?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  user        User              @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
}

// 바인권
model Voucher {
  id           String        @id @default(cuid())
  userId       String
  type         VoucherType
  status       VoucherStatus @default(ACTIVE)
  expiresAt    DateTime?
  usedAt       DateTime?
  tournamentId String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  user         User          @relation(fields: [userId], references: [id])
  tournament   Tournament?   @relation(fields: [tournamentId], references: [id])

  @@index([userId])
  @@index([status])
}

// 토너먼트
model Tournament {
  id        String    @id @default(cuid())
  title     String
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  vouchers  Voucher[]

  @@index([startDate])
}
