// Prisma 스키마 파일
// 데이터베이스 테이블 구조와 관계를 정의합니다

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "windows"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// 사용자 역할 (기존 Role)
enum Role {
  USER
  ADMIN
}

// 회원 등급 (새로운 MemberGrade)
enum MemberGrade {
  GUEST   // 게스트 - 기본 등급, 바인권 할증 가격 적용
  REGULAR // 정회원 - 할인 가격으로 바인권 구매 가능
  ADMIN   // 관리자 - 시스템 전체 관리 권한
}

// 거래 타입
enum TransactionType {
  CHARGE
  VOUCHER_PURCHASE // 기존 'PURCHASE'와 'USE'를 통합
  ADMIN_ADJUSTMENT
  REFUND
}

// 거래 상태
enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
  FAILED
}

// 바인권 타입
enum VoucherType {
  BUYIN
  REBUY
}

// 바인권 상태
enum VoucherStatus {
  ACTIVE
  USED
  EXPIRED
}

// 사용자 상태 (기존 UserStatus, MemberGrade와 중복 가능성 있으나 유지)
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

// 사용자 모델
model User {
  id            String          @id @default(cuid())
  email         String?         @unique
  emailVerified DateTime?
  name          String?
  image         String?
  phone         String?
  role          Role            @default(USER)     // 기존 Role 유지
  status        UserStatus      @default(ACTIVE)   // 기존 UserStatus 유지
  points        Int             @default(0)
  lastLoginAt   DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  grade         MemberGrade     @default(GUEST)    // 새로운 MemberGrade 추가

  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
  vouchers      Voucher[]
  tournaments   TournamentEntry[] // 새로운 관계 추가
  pointLogs     PointLog[]        // 새로운 관계 추가

  @@index([email])
  @@index([role])
  @@index([grade]) // 새로운 인덱스 추가
  @@index([status])
}

// NextAuth Account 모델
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId]) // 추가된 인덱스
}

// NextAuth Session 모델
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // 추가된 인덱스
}

// NextAuth VerificationToken 모델
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 포인트 거래 내역
model Transaction {
  id          String            @id @default(cuid())
  userId      String
  type        TransactionType
  amount      Int
  status      TransactionStatus @default(PENDING)
  description String?
  metadata    Json?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  user        User              @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
}

// 바인권
model Voucher {
  id           String        @id @default(cuid())
  userId       String
  type         VoucherType
  status       VoucherStatus @default(ACTIVE)
  expiresAt    DateTime?
  usedAt       DateTime?
  tournamentId String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  user         User          @relation(fields: [userId], references: [id])
  tournament   Tournament?   @relation(fields: [tournamentId], references: [id])

  @@index([userId])
  @@index([status])
}

// 토너먼트
model Tournament {
  id              String             @id @default(cuid())
  title           String
  startDate       DateTime
  endDate         DateTime?
  maxEntries      Int?               // 최대 참가자 수
  buyinRequired   Int                @default(1) // 필요한 바인권 수
  rebuyAllowed    Boolean            @default(true)
  status          String             @default("UPCOMING") // UPCOMING, ACTIVE, COMPLETED, CANCELLED
  createdBy       String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  description     String? // 추가된 필드
  name            String? // 추가된 필드

  vouchers        Voucher[]
  entries         TournamentEntry[]  // 새로운 관계 추가

  @@index([status])
  @@index([startDate])
}

// 새로운 모델: TournamentEntry (토너먼트 참가 기록)
model TournamentEntry {
  id           String     @id @default(cuid())
  userId       String
  tournamentId String
  buyinCount   Int        @default(1)
  rebuyCount   Int        @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  user         User       @relation(fields: [userId], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id])

  @@unique([userId, tournamentId]) // 한 사용자는 한 토너먼트에 한 번만 참가
  @@index([userId])
  @@index([tournamentId])
}

// 새로운 모델: PointLog (포인트 변동 기록)
model PointLog {
  id          String   @id @default(cuid())
  userId      String
  amount      Int      // 변동량
  type        String   // 충전, 사용, 조정 등
  description String?
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

// 새로운 모델: VoucherPricing (바인권 가격 정책)
model VoucherPricing {
  id          String      @id @default(cuid())
  type        VoucherType // 바인권 종류 (BUYIN, REBUY)
  price       Int         // 가격
  memberGrade MemberGrade // 적용 등급 (GUEST, REGULAR)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([type, memberGrade, isActive]) // 타입, 등급, 활성화 상태 조합 유니크
  @@index([type])
  @@index([memberGrade])
}

// 새로운 모델: SystemSetting (시스템 설정)
model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String   @db.Text
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
